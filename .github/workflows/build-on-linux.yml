name: "Build On Linux"

on: # @see https://help.github.com/en/articles/events-that-trigger-workflows#webhook-events
  push:
    branches: # Array of patterns that match refs/heads
      - main # Push events on master branch
    tags:
      - "*"
  pull_request:
    branches:
      - main

jobs:
  format_and_lint:
    name: "Format and lint"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache cargo modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-format_and_lint-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install rust toolchain for host
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu
          override: true
          default: true
          components: "rustfmt, clippy, cargo, rust-docs"
      - name: Format and lint
        shell: bash
        run: |
          cargo fmt --all -- --check
          cargo clippy
  build: # job id, can be any string
    # Job name is Build And Publish
    name: Build
    # This job runs on Linux
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
        target:
          [
            aarch64-linux-android,
            aarch64-unknown-linux-gnu,
            aarch64-unknown-linux-musl,
            x86_64-unknown-linux-gnu,
            x86_64-unknown-linux-musl,
            arm-unknown-linux-gnueabihf,
            arm-linux-androideabi,
            armv7-linux-androideabi,
            armv7-unknown-linux-gnueabihf,
            i686-unknown-linux-gnu,
          ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache cargo modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install rust toolchain for host
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          components: "rustfmt, clippy, cargo, rust-docs"
      - name: Install Cross
        shell: bash
        if: ${{ matrix.target != 'x86_64-unknown-linux-gnu' }}
        run: |
          cargo install cross --git https://github.com/cross-rs/cross
          cargo install xargo
      - uses: dtolnay/rust-toolchain@master
        id: toolchain
        with:
          toolchain: ${{ (matrix.target == 'riscv64gc-unknown-linux-gnu'  && '1.72.1') || 'stable' }}
          target: ${{ matrix.target }}
      - name: Set Rust toolchain override
        run: rustup override set ${{ steps.toolchain.outputs.name }}
      - name: Cross-compilation (test release)
        run: cross build -p ddns-cli --release --target ${{ matrix.target }}
      - name: Cross-compilation (test release)
        if: ${{ matrix.target == 'x86_64-unknown-linux-gnu' }}
        run: cross test --release --verbose --target ${{ matrix.target }} --bin ddns-cli
      - name: Prepare package
        shell: bash
        if: ${{ github.ref_type == 'tag' }}
        run: |
          cd "$GITHUB_WORKSPACE/target/${{ matrix.target }}/release/" ;
          mkdir -p bin;
          if [[ -e ddns-cli ]]; then
            cp -f ddns-cli bin/ddns-cli ;
          elif [[ -e "ddns-cli.exe" ]]; then
            cp -f ddns-cli.exe bin/ddns-cli.exe ;
          else
            cp -f ddns-cli* bin/ ;
          fi
          tar -zcvf ${{ matrix.target }}.tar.gz bin ;
          cd "$GITHUB_WORKSPACE" ;
      - uses: xresloader/upload-to-github-release@main
        if: ${{ github.ref_type == 'tag' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: "target/${{ matrix.target }}/release/${{ matrix.target }}.tar.gz"
          tags: true
          draft: false
          prerelease: false
          overwrite: true
      - name: Update docker and cargo
        shell: bash
        if: ${{ github.ref_type == 'tag' && matrix.target == 'x86_64-unknown-linux-musl' }}
        run: |
          cd "$GITHUB_WORKSPACE/target/${{ matrix.target }}/release/" ;
          which docker || true;
          cp -f ../../../Dockerfile ./ ;
          TAG_NAME="$(echo "${{ github.ref }}" | awk 'match($0, /refs\/tags\/(.+)/, tag_name) {print tag_name[1]}')";
          echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "owt5008137" --password-stdin docker.io
          docker build --force-rm --tag docker.io/owt5008137/ddns-cli:latest -f Dockerfile . ;
          docker tag docker.io/owt5008137/ddns-cli:latest docker.io/owt5008137/ddns-cli:$TAG_NAME ;
          docker push docker.io/owt5008137/ddns-cli:latest ;
          docker push docker.io/owt5008137/ddns-cli:$TAG_NAME ;
          # Github package
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker tag docker.io/owt5008137/ddns-cli:latest ghcr.io/${{ github.repository_owner }}/ddns-cli:latest
          docker tag docker.io/owt5008137/ddns-cli:$TAG_NAME ghcr.io/${{ github.repository_owner }}/ddns-cli:$TAG_NAME
          docker push ghcr.io/${{ github.repository_owner }}/ddns-cli:latest
          docker push ghcr.io/${{ github.repository_owner }}/ddns-cli:$TAG_NAME
          # Cargo
          cd "$GITHUB_WORKSPACE" ;
          echo "${{ secrets.CARGO_TOKEN }}" | cargo login ;
          cargo publish --allow-dirty ;
